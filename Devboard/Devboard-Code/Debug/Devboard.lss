
Devboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  000000fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000048  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000012b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000139  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001775  00000000  00000000  00000159  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012b1  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  00002b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00002dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000831  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00003619  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000002  0000007e  0000007e  000000f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000362c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000028  00000048  00000048  000000bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  00000082  00000082  000000f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  00000084  00000084  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    0000000e  00000070  00000070  000000e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000002  00000086  00000086  000000fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
   4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
   8:	3a c0       	rjmp	.+116    	; 0x7e <__bad_interrupt>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
  12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
  14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
  18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
  1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
  1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
  20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
  24:	2c c0       	rjmp	.+88     	; 0x7e <__bad_interrupt>
  26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
  28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
  2a:	29 c0       	rjmp	.+82     	; 0x7e <__bad_interrupt>
  2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
  2e:	27 c0       	rjmp	.+78     	; 0x7e <__bad_interrupt>
  30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
  32:	25 c0       	rjmp	.+74     	; 0x7e <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	03 d0       	rcall	.+6      	; 0x48 <_etext>
  42:	16 c0       	rjmp	.+44     	; 0x70 <exit>

00000044 <_exit>:
  44:	f8 94       	cli

00000046 <__stop_program>:
  46:	ff cf       	rjmp	.-2      	; 0x46 <__stop_program>

Disassembly of section .text:

0000007e <__bad_interrupt>:
  7e:	c0 cf       	rjmp	.-128    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000048 <main>:

#include <avr/io.h>

int main(void)
{
	PORTA.DIRCLR = PIN6_bm; // Set's PA6 as input - Button pressed down
  48:	e0 e0       	ldi	r30, 0x00	; 0
  4a:	f4 e0       	ldi	r31, 0x04	; 4
  4c:	80 e4       	ldi	r24, 0x40	; 64
  4e:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIRSET = PIN5_bm; // Set's PA5 as output - The LED should light up
  50:	80 e2       	ldi	r24, 0x20	; 32
  52:	81 83       	std	Z+1, r24	; 0x01
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm; // Need a defined condition when it's not activated
  54:	88 e0       	ldi	r24, 0x08	; 8
  56:	86 8b       	std	Z+22, r24	; 0x16
	
    while(1)
    {
        //TODO:: Please write your application code 
		if (!(PORTA.IN & PIN6_bm)) {
  58:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
  5c:	86 fd       	sbrc	r24, 6
  5e:	04 c0       	rjmp	.+8      	; 0x68 <main+0x20>
			PORTA.OUTSET = PIN5_bm;
  60:	80 e2       	ldi	r24, 0x20	; 32
  62:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
  66:	f8 cf       	rjmp	.-16     	; 0x58 <main+0x10>
		} else {
			PORTA.OUTCLR = PIN5_bm;
  68:	80 e2       	ldi	r24, 0x20	; 32
  6a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
  6e:	f4 cf       	rjmp	.-24     	; 0x58 <main+0x10>

Disassembly of section .text.__dummy_fini:

00000080 <_fini>:
  80:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000082 <__funcs_on_exit>:
  82:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000084 <__simulator_exit>:
  84:	08 95       	ret

Disassembly of section .text.exit:

00000070 <exit>:
  70:	ec 01       	movw	r28, r24
  72:	07 d0       	rcall	.+14     	; 0x82 <__funcs_on_exit>
  74:	05 d0       	rcall	.+10     	; 0x80 <__EEPROM_REGION_LENGTH__>
  76:	ce 01       	movw	r24, r28
  78:	05 d0       	rcall	.+10     	; 0x84 <__simulator_exit>
  7a:	ce 01       	movw	r24, r28
  7c:	04 d0       	rcall	.+8      	; 0x86 <_Exit>

Disassembly of section .text._Exit:

00000086 <_Exit>:
  86:	de df       	rcall	.-68     	; 0x44 <_exit>
