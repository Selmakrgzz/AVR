
GPIO_Course.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001d0  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001ff  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030f8  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a5d  00000000  00000000  00003325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033f  00000000  00000000  00005d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000060c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001320  00000000  00000000  000060e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00007408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007418  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000002a  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  00000158  00000158  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  0000015a  0000015a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  00000138  00000138  000001ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  58:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  5c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  60:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  68:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  6c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  70:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  74:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  7c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  80:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  84:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  8c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  90:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  94:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  98:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  9c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  ac:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  bc:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  c0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  c4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  c8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  cc:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  d0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  d4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  d8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  dc:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  e0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  e4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	80 91 01 10 	lds	r24, 0x1001	; 0x801001 <__TEXT_REGION_LENGTH__+0x7e1001>
  ec:	8f 7c       	andi	r24, 0xCF	; 207
  ee:	80 60       	ori	r24, 0x00	; 0
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <__TEXT_REGION_LENGTH__+0x7e1001>
  f6:	11 24       	eor	r1, r1
  f8:	1f be       	out	0x3f, r1	; 63
  fa:	cf ef       	ldi	r28, 0xFF	; 255
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	df e7       	ldi	r29, 0x7F	; 127
 100:	de bf       	out	0x3e, r29	; 62
 102:	0e 94 87 00 	call	0x10e	; 0x10e <_etext>
 106:	0c 94 9c 00 	jmp	0x138	; 0x138 <exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__FLMAP_SECTION0__>

Disassembly of section .text.main:

0000010e <main>:
	//Er den 1, så gir den strøm.
	
	//Jobber med PORTC registeret
	//bm betyr bit mask.
	//Klargjør til å brukes pinnen 6
	PORTC.DIRSET = PIN6_bm; //Setter en bit mask inn i DIRSET. PIN6 kobla til lyset
 10e:	e0 e4       	ldi	r30, 0x40	; 64
 110:	f4 e0       	ldi	r31, 0x04	; 4
 112:	80 e4       	ldi	r24, 0x40	; 64
 114:	81 83       	std	Z+1, r24	; 0x01
	//Vil ha noe fra pinnen 6
	PORTC.OUTSET = PIN6_bm; //Kobla til knappen
 116:	85 83       	std	Z+5, r24	; 0x05
	
	//Skrur til en input
	PORTC.DIRCLR = PIN7_bm;
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	82 83       	std	Z+2, r24	; 0x02
	//Uten pullup, så er spenningen flytende. Med den er den definert. 
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	87 8b       	std	Z+23, r24	; 0x17
			//Lyset er av
			//Setter pinnen høy
			PORTC.OUTSET = PIN6_bm;
		}***/
		
		if(!(PORTC.IN & PIN7_bm)){
 120:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7e0448>
 124:	88 23       	and	r24, r24
 126:	e4 f3       	brlt	.-8      	; 0x120 <main+0x12>
			PORTC.OUTTGL = PIN6_bm;
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x7e0447>
			while(!(PORTC.IN & PIN7_bm)){}
 12e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7e0448>
 132:	88 23       	and	r24, r24
 134:	e4 f7       	brge	.-8      	; 0x12e <main+0x20>
 136:	f4 cf       	rjmp	.-24     	; 0x120 <main+0x12>

Disassembly of section .text.__dummy_fini:

00000156 <_fini>:
 156:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000158 <__funcs_on_exit>:
 158:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000015a <__simulator_exit>:
 15a:	08 95       	ret

Disassembly of section .text.exit:

00000138 <exit>:
 138:	ec 01       	movw	r28, r24
 13a:	0e 94 ac 00 	call	0x158	; 0x158 <__funcs_on_exit>
 13e:	0e 94 ab 00 	call	0x156	; 0x156 <_fini>
 142:	ce 01       	movw	r24, r28
 144:	0e 94 ad 00 	call	0x15a	; 0x15a <__simulator_exit>
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 a9 00 	call	0x152	; 0x152 <_Exit>

Disassembly of section .text._Exit:

00000152 <_Exit>:
 152:	0e 94 85 00 	call	0x10a	; 0x10a <_exit>
